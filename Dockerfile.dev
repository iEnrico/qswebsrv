# Development setup

FROM node:18.6.0-alpine AS development

ENV NODE_ENV development

# Add a work directory
WORKDIR /app

# Cache dependencies
COPY package.json .

# Install dependencies
RUN npm install --force

# Copy app files
COPY . .

# Expose port
EXPOSE 8080

# Start the app
CMD [ "npm", "run", "serve" ]

# ------------------------------------------------

# Production setup

FROM node:18.6.0-alpine AS production

ENV NODE_ENV production

# Add a work directory
WORKDIR /app

# Cache dependencies
COPY package.json .

# Git setup
RUN apk add git

# Operation system updates
RUN apk update && apk upgrade && apk add curl py-pip make g++

# Install specific dependencies
RUN npm install -g @vue/cli
RUN npm install -g @vue/cli-service
RUN npm install -g @vue/cli-plugin-babel
RUN npm install -g @vue/cli-plugin-eslint
RUN npm install @vue/cli
RUN npm install @vue/cli-service
RUN npm install @vue/cli-plugin-babel
RUN npm install @vue/cli-plugin-eslint

# Install dependencies
RUN npm install --force

# Copy app files
COPY . .

# Build the application
RUN npm run build

# ------------------------------------------------
# Server setup

# nginx state for serving content
FROM nginx:alpine as server

# Set working directory to nginx asset directory
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
# RUN rm /etc/nginx/conf.d/default.conf

# Change permissions
RUN chmod -R 777 /var ; chmod -R 777 /var/cache ; chmod -R 777 /run

# Copy static assets from builder stage
COPY --from=production /app/dist .

# Export settings
EXPOSE 80

# Containers run nginx with global directives and daemon off
ENTRYPOINT ["nginx", "-g", "daemon off;"]
